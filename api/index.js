// File: /api/index.js (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)

import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import axios from 'axios';
import { GoogleGenerativeAI } from '@google/generative-ai';
import sqlite3 from 'sqlite3';
import csv from 'csv-parser';
import fs from 'fs';
import path from 'path';

const app = express();
app.use(cors());
app.use(express.json());

const DB_PATH = path.join('/tmp', 'allergens.db');
const CACHE_DB_PATH = path.join('/tmp', 'cache.db'); // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cache DB
let db , cacheDb;

const initializeMainDb = () => new Promise((resolve, reject) => {
    if (fs.existsSync(DB_PATH)) fs.unlinkSync(DB_PATH);
    const newDb = new sqlite3.Database(DB_PATH, (err) => {
        if (err) return reject(err);
        newDb.run(`CREATE TABLE allergens (name TEXT UNIQUE, keywords TEXT, function TEXT, found_in TEXT)`, (err) => {
            if (err) return reject(err);
            const csvPath = path.join(process.cwd(), 'allergens.csv');
            if (!fs.existsSync(csvPath)) return reject(new Error('allergens.csv not found'));
            
            fs.createReadStream(csvPath)
              .pipe(csv())
              .on('data', (row) => newDb.run(`INSERT OR IGNORE INTO allergens VALUES (?,?,?,?)`, [row.name, row.keywords, row.function, row.found_in]))
              .on('end', () => {
                  console.log('Main DB Initialized in /tmp.');
                  resolve(newDb);
              });
        });
    });
});

const ensureDbInitialized = async (req, res, next) => {
    try {
        if (!db || !db.isReady) {
            db = await initializeMainDb();
            db.isReady = true;
        }
        if (!cacheDb || !cacheDb.isReady) {
            cacheDb = await initializeCacheDb();
            cacheDb.isReady = true;
        }
    } catch (error) {
        console.error("Failed to initialize databases:", error);
        return res.status(500).json({ error: "Database initialization failed.", details: error.message });
    }
    next();
};

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ---
async function generateStructuredAnswer(context, question) {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash", generationConfig: { response_mime_type: "application/json" } });
    const prompt = `‡∏à‡∏≤‡∏Å Context: """${context}""" ‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå "${question}" ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏µ‡πâ: {"name": "...", "aliases": "...", "func": "...", "products": "..."}. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"`;
    try {
        const result = await model.generateContent(prompt);
        return JSON.parse(result.response.text());
    } catch (error) {
        console.error("‚ùå (Gemini) Error:", error);
        return { name: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ", aliases: "-", func: "-", products: "-" };
    }
}
// --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cache ---
const initializeCacheDb = () => new Promise((resolve, reject) => {
    const newCacheDb = new sqlite3.Database(CACHE_DB_PATH, (err) => {
        if (err) return reject(err);
        newCacheDb.run(`CREATE TABLE IF NOT EXISTS ai_cache (query TEXT PRIMARY KEY, response TEXT)`, (err) => {
            if (err) return reject(err);
            console.log('Cache DB Initialized in /tmp.');
            resolve(newCacheDb);
        });
    });
});

// --- API Endpoints ---

// --- Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Live Search (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Cache) ---
app.post('/api/live-search', ensureDbInitialized, async (req, res) => {
    const { question } = req.body;
    if (!question || question.trim().length < 2) return res.json({ found: false });

    const searchTerm = question.toLowerCase().trim();
    const likeTerm = `%${searchTerm}%`;

    try {
        // ---- 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô DB ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏ö‡∏ö LIKE) ----
        const dbResult = await new Promise((resolve, reject) => {
            const sql = `SELECT * FROM allergens WHERE keywords LIKE ? OR name LIKE ? LIMIT 1`;
            db.get(sql, [likeTerm, likeTerm], (err, row) => {
                if (err) reject(err);
                else resolve(row || null);
            });
        });

        if (dbResult) {
            console.log(`‚úÖ ‡∏û‡∏ö‡πÉ‡∏ô DB ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${question}"`);
            return res.json({
                found: true,
                data: {
                    allergy_status: '‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
                    name: dbResult.name,
                    aliases: dbResult.keywords.replace(/,/g, ', '),
                    func: dbResult.function,
                    products: dbResult.found_in,
                    source: '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤'
                }
            });
        }

        // ---- 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô Cache (‡πÅ‡∏ö‡∏ö LIKE) ----
        const cacheResult = await new Promise((resolve, reject) => {
            const sql = `SELECT response FROM ai_cache WHERE query LIKE ? LIMIT 1`;
            cacheDb.get(sql, [likeTerm], (err, row) => {
                if (err) reject(err);
                else resolve(row || null);
            });
        });

        if (cacheResult) {
            console.log(`‚úÖ ‡∏û‡∏ö Cache ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${question}"`);
            return res.json({ found: true, data: JSON.parse(cacheResult.response) });
        }

        // ---- 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡πà ----
        console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô DB ‡πÅ‡∏•‡∏∞ Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${question}"`);
        res.json({ found: false });

    } catch (error) {
        console.error("Live Search Error:", error);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" });
    }
});

// --- Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI (‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Cache) ---
app.post('/api/ask-ai', ensureDbInitialized, async (req, res) => {
    const { question } = req.body;
    console.log(`\nü§ñ AI Search ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${question}"`);

    try {
        const searchQuery = `${question} ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏Ñ‡∏°‡∏µ`;
        const searchResults = await axios.get(`https://www.googleapis.com/customsearch/v1`, {
            params: { key: process.env.SEARCH_API_KEY, cx: process.env.SEARCH_ENGINE_ID, q: searchQuery, num: 3 }
        });
        const googleContext = searchResults.data.items?.map(item => `‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:${item.title}\n‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:${item.snippet}`).join('\n---\n') || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
        
        const aiResult = await generateStructuredAnswer(googleContext, question);
        
        const finalResponse = {
            ...aiResult,
            source: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (Cache)',
            allergy_status: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ'
        };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Cache
        if (aiResult.name && aiResult.name !== "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ" && aiResult.name !== "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") {
            const responseString = JSON.stringify(finalResponse);
            cacheDb.run(`INSERT OR REPLACE INTO ai_cache (query, response) VALUES (?, ?)`, [question.toLowerCase().trim(), responseString]);
            console.log(`üíæ (Cache) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${question}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`);
        }

        res.json(finalResponse);

    } catch (error) {
        console.error("AI Search Error:", error);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ AI" });
    }
});

app.get('/api/get-all-allergens', ensureDbInitialized, (req, res) => {
    const sql = `SELECT name, keywords FROM allergens ORDER BY name ASC`;
    db.all(sql, [], (err, rows) => {
        if (err) res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
        else res.json(rows);
    });
});

// --- Endpoint ‡πÉ‡∏´‡∏°‡πà! ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö Cache ---
app.post('/api/delete-cache', ensureDbInitialized, async (req, res) => {
    const { query } = req.body;
    if (!query) {
        return res.status(400).json({ error: "Query is required to delete cache." });
    }

    const searchTerm = query.toLowerCase().trim();
    const sql = `DELETE FROM ai_cache WHERE query = ?`;

    cacheDb.run(sql, [searchTerm], function(err) {
        if (err) {
            console.error("‚ùå (Cache) Error deleting cache:", err.message);
            return res.status(500).json({ error: "Failed to delete cache." });
        }
        
        // this.changes ‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.changes > 0) {
            console.log(`üóëÔ∏è (Cache) ‡∏•‡∏ö Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${searchTerm}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`);
            res.json({ success: true, message: `Cache for "${searchTerm}" deleted.` });
        } else {
            res.json({ success: false, message: `No cache found for "${searchTerm}".` });
        }
    });
});

// Export a single handler for Vercel
export default app;
// cache_database.js (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö LIKE)
import sqlite3 from 'sqlite3';

const CACHE_DB_FILE = './cache.db';

const cacheDb = new sqlite3.Database(CACHE_DB_FILE, (err) => {
    if (err) {
        console.error("‚ùå Error opening cache database " + err.message);
    } else {
        console.log("‚úÖ Cache Database connected successfully.");
        cacheDb.run(`CREATE TABLE IF NOT EXISTS ai_cache (
            query TEXT PRIMARY KEY,
            response TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )`, (err) => {
            if (err) console.error("‚ùå Error creating cache table " + err.message);
            else console.log("‚úÖ Table 'ai_cache' is ready.");
        });
    }
});

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Cache (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö LIKE)
 * @param {string} query ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<object|null>} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON object ‡∏´‡∏£‡∏∑‡∏≠ null
 */
export function findInCache(query) {
    return new Promise((resolve) => {
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        const searchTerm = query.toLowerCase().trim();
        if (searchTerm.length < 2) {
            return resolve(null);
        }

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
        // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á term ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö LIKE
        const likeTerm = `%${searchTerm}%`; 
        
        // 2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ LIKE ‡πÅ‡∏ó‡∏ô =
        const sql = `SELECT response FROM ai_cache WHERE query LIKE ? LIMIT 1`;

        cacheDb.get(sql, [likeTerm], (err, row) => {
            if (err || !row) {
                resolve(null); // ‡∏ñ‡πâ‡∏≤ error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null
            } else {
                console.log(`‚úÖ ‡∏û‡∏ö Cache ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${query}"`);
                resolve(JSON.parse(row.response));
            }
        });
        // ------------------
    });
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Cache ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
 * @param {string} query ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {object} response ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Object
 */
export function saveToCache(query, response) {
    const responseString = JSON.stringify(response);
    const sql = `INSERT OR REPLACE INTO ai_cache (query, response) VALUES (?, ?)`;
    
    cacheDb.run(sql, [query.toLowerCase().trim(), responseString], function(err) {
        if (err) {
            console.error("‚ùå (Cache) Error saving to cache database:", err.message);
        } else {
            console.log(`üíæ (Cache) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${query}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`);
        }
    });
}